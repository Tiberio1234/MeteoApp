@page "/weather"
@using Radzen.Blazor;
@using Radzen;
@using Models;
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="css/weather.css">
<PageTitle>Weather</PageTitle>

<div id="weather-container" class="weather-container">

    <h1>Weather</h1>

    <p>This component demonstrates showing data and triggering effects based on weather conditions.</p>

    <RadzenDataGrid AllowColumnResize="true" AllowRowSelectOnRowClick="true" SelectionMode="DataGridSelectionMode.Single"
                    Data="@weatherItems" TItem="WeatherData"
                    Style="--rz-grid-header-text-transform: none; --rz-grid-header-font-size: 20px; width:100%;"
                    RowSelect="OnRowClick">
        <Columns>
            <RadzenDataGridColumn TItem="WeatherData" Property="Temperature" Title="Temperature (°C)" />
            <RadzenDataGridColumn TItem="WeatherData" Property="WindSpeed" Title="Wind Speed (km/h)" />
            <RadzenDataGridColumn TItem="WeatherData" Property="Humidity" Title="Humidity (%)" />
        </Columns>
    </RadzenDataGrid>

</div>

@code {

    private List<WeatherData> weatherItems = new List<WeatherData>();

    protected override async Task OnInitializedAsync()
    {
        weatherItems = new List<WeatherData>
        {
            new WeatherData { Temperature = 23.4, WindSpeed = 12.5, Humidity = 58 },
            new WeatherData { Temperature = 21.2, WindSpeed = 15.0, Humidity = 60 },
            new WeatherData { Temperature = 21.2, WindSpeed = 15.0, Humidity = 60 },
            new WeatherData { Temperature = 21.2, WindSpeed = 15.0, Humidity = 60 },
            new WeatherData { Temperature = 25.7, WindSpeed = 8.3, Humidity = 55 }
        };
    }

    private async Task OnRowClick(WeatherData args)
    {
        var weatherData = args;
        string effect = weatherData.Temperature > 25 ? "sunny" : "rainy";
        await JSRuntime.InvokeVoidAsync("applyWeatherEffect", effect);
    }


}
